#!/usr/bin/env python3
"""
API Keys Setup Script
Interactive script to help users configure their API keys for the AI Stock Analyzer app.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with user input"""
    
    print("üîë AI Stock Analyzer - API Keys Setup")
    print("=" * 50)
    print()
    print("This script will help you set up your API keys securely.")
    print("Your keys will be stored in a .env file that is NOT committed to Git.")
    print()
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Get API keys from user
    print("üìã Let's set up your API keys:")
    print()
    
    # OpenAI API Key
    print("1Ô∏è‚É£  OpenAI API Key (Recommended for AI features)")
    print("   Get your key from: https://platform.openai.com/api-keys")
    openai_key = input("   Enter your OpenAI API key (or press Enter to skip): ").strip()
    
    # News API Key
    print()
    print("2Ô∏è‚É£  News API Key (Recommended for news features)")
    print("   Get your key from: https://newsapi.org/register")
    news_key = input("   Enter your News API key (or press Enter to skip): ").strip()
    
    # Alpha Vantage API Key
    print()
    print("3Ô∏è‚É£  Alpha Vantage API Key (Optional)")
    print("   Get your key from: https://www.alphavantage.co/support/#api-key")
    alpha_key = input("   Enter your Alpha Vantage API key (or press Enter to skip): ").strip()
    
    # Create .env content
    env_content = """# AI Stock Analyzer - API Keys Configuration
# Generated by setup_api_keys.py

# OpenAI API Key (Required for AI-powered insights)
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY={openai_key}

# News API Key (Required for real-time financial news)
# Get your key from: https://newsapi.org/register
NEWS_API_KEY={news_key}

# Alpha Vantage API Key (Optional - for additional market data)
# Get your key from: https://www.alphavantage.co/support/#api-key
ALPHA_VANTAGE_API_KEY={alpha_key}

# Application Settings
DEBUG=True
LOG_LEVEL=INFO
""".format(
        openai_key=openai_key if openai_key else "your_openai_api_key_here",
        news_key=news_key if news_key else "your_news_api_key_here",
        alpha_key=alpha_key if alpha_key else "your_alpha_vantage_api_key_here"
    )
    
    # Write .env file
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print()
        print("‚úÖ .env file created successfully!")
        print()
        
        # Summary
        print("üìä Setup Summary:")
        if openai_key:
            print("   ‚úÖ OpenAI API Key: Configured")
        else:
            print("   ‚ö†Ô∏è  OpenAI API Key: Not configured (AI features will be limited)")
        
        if news_key:
            print("   ‚úÖ News API Key: Configured")
        else:
            print("   ‚ö†Ô∏è  News API Key: Not configured (news features will be limited)")
        
        if alpha_key:
            print("   ‚úÖ Alpha Vantage API Key: Configured")
        else:
            print("   ‚ÑπÔ∏è  Alpha Vantage API Key: Not configured (optional)")
        
        print()
        print("üîí Security Note: Your .env file is in .gitignore and will not be committed to Git.")
        print()
        
        # Next steps
        print("üéâ Next Steps:")
        print("1. Run the app: python run.py")
        print("2. Test the features in the app")
        print("3. Check API_SETUP_GUIDE.md for more details")
        print()
        
        # Test API keys if provided
        if openai_key or news_key or alpha_key:
            test_keys = input("Would you like to test your API keys? (y/N): ").lower()
            if test_keys == 'y':
                test_api_keys(openai_key, news_key, alpha_key)
    
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return

def test_api_keys(openai_key, news_key, alpha_key):
    """Test the provided API keys"""
    
    print()
    print("üß™ Testing API Keys...")
    print()
    
    # Test OpenAI
    if openai_key and openai_key != "your_openai_api_key_here":
        print("Testing OpenAI API...")
        try:
            import openai
            openai.api_key = openai_key
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=5
            )
            print("   ‚úÖ OpenAI API: Working")
        except Exception as e:
            print(f"   ‚ùå OpenAI API: Error - {e}")
    else:
        print("   ‚ö†Ô∏è  OpenAI API: Not configured")
    
    # Test News API
    if news_key and news_key != "your_news_api_key_here":
        print("Testing News API...")
        try:
            import requests
            url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={news_key}"
            response = requests.get(url)
            if response.status_code == 200:
                print("   ‚úÖ News API: Working")
            else:
                print(f"   ‚ùå News API: Error - Status {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå News API: Error - {e}")
    else:
        print("   ‚ö†Ô∏è  News API: Not configured")
    
    # Test Alpha Vantage
    if alpha_key and alpha_key != "your_alpha_vantage_api_key_here":
        print("Testing Alpha Vantage API...")
        try:
            import requests
            url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=AAPL&interval=1min&apikey={alpha_key}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if "Error Message" not in data:
                    print("   ‚úÖ Alpha Vantage API: Working")
                else:
                    print("   ‚ùå Alpha Vantage API: Invalid key")
            else:
                print(f"   ‚ùå Alpha Vantage API: Error - Status {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Alpha Vantage API: Error - {e}")
    else:
        print("   ‚ÑπÔ∏è  Alpha Vantage API: Not configured (optional)")
    
    print()
    print("‚úÖ API testing complete!")

def main():
    """Main function"""
    
    print("üöÄ AI Stock Analyzer - API Keys Setup")
    print("=" * 50)
    print()
    
    # Check if we're in the right directory
    if not Path("app.py").exists():
        print("‚ùå Error: Please run this script from the StockTradingApp directory")
        print("   Current directory:", os.getcwd())
        return
    
    # Check if .gitignore exists and contains .env
    gitignore_path = Path(".gitignore")
    if gitignore_path.exists():
        with open(gitignore_path, "r") as f:
            content = f.read()
            if ".env" not in content:
                print("‚ö†Ô∏è  Warning: .env not found in .gitignore")
                print("   Adding .env to .gitignore...")
                with open(gitignore_path, "a") as f:
                    f.write("\n# Environment variables\n.env\n")
    
    # Create .env file
    create_env_file()

if __name__ == "__main__":
    main() 